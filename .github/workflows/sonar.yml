name: Unit Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  execute-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the solution
        run: dotnet build --no-restore --configuration Release

      - name: Run Tests and Generate Coverage
        run: |
          dotnet test --collect:"XPlat Code Coverage" \
            --results-directory="./TestResults" \
            /p:CoverletOutput="./TestResults/coverage.cobertura.xml" \
            /p:CoverletOutputFormat="cobertura"

      - name: Parse Coverage Results
        run: |
          COVERAGE_FILE=$(find ./TestResults -name "coverage.cobertura.xml" | head -n 1)
          if [ -f "$COVERAGE_FILE" ]; then
            echo "Coverage file found."
          else
            echo "Error: Coverage file not found!" && exit 1
          fi

      - name: Generate Coverage Summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const parser = require('xml2js').parseString;

            // Read and parse the coverage XML file
            const coverageFile = fs.readFileSync('$COVERAGE_PATH', 'utf8');
            let summary = "";
            
            parser(coverageFile, (err, result) => {
              if (err) throw err;

              // Extract relevant data
              const coverageMetrics = result.coverage.$;
              const coveredLines = parseInt(coverageMetrics.coveredlines, 10);
              const totalLines = parseInt(coverageMetrics.totallines, 10);
              const coveragePercent = ((coveredLines / totalLines) * 100).toFixed(2);

              summary = `
              ### Test Coverage Summary
              - **Code Coverage**: ${coveragePercent}%
              - **Lines Covered**: ${coveredLines}
              - **Total Lines**: ${totalLines}
              `;
            });

            // Append the summary to the job's summary
            core.summary.addRaw(summary).write();
